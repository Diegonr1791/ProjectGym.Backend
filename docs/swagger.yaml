basePath: /api/v1
definitions:
  dto.CreateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      role_id:
        type: integer
    type: object
  dto.UpdateUserRequest:
    properties:
      email:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      role_id:
        type: integer
    type: object
  dto.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      name:
        type: string
      role_id:
        type: integer
      updated_at:
        type: string
    type: object
  errors.ErrorResponse:
    description: Standard error response
    properties:
      code:
        type: string
      message:
        type: string
    type: object
  http.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  http.LoginResponse:
    properties:
      access_token:
        type: string
      user:
        properties:
          email:
            type: string
          id:
            type: integer
        type: object
    type: object
  http.MessageResponse:
    description: Simple message response
    properties:
      message:
        example: Operation completed successfully
        type: string
    type: object
  models.Ejercicio:
    description: Exercise model
    properties:
      grupo_muscular_id:
        type: integer
      id:
        type: integer
      nombre:
        type: string
      tipo_ejercicio_id:
        type: integer
    type: object
  models.Favorita:
    properties:
      fecha:
        type: string
      id:
        type: integer
      rutina_id:
        type: integer
      usuario_id:
        type: integer
    type: object
  models.GrupoMuscular:
    properties:
      id:
        type: integer
      nombre:
        type: string
    type: object
  models.Medicion:
    properties:
      fecha:
        type: string
      grasa_corporal:
        type: number
      id:
        type: integer
      musculo:
        type: number
      peso_corporal:
        type: number
      usuario_id:
        type: integer
    type: object
  models.Role:
    description: Role entity for user permissions and access control
    properties:
      created_at:
        description: Audit fields
        example: "2023-01-01T00:00:00Z"
        type: string
      description:
        example: Administrator role with full access
        type: string
      id:
        example: 1
        type: integer
      is_active:
        example: true
        type: boolean
      is_deleted:
        description: Soft delete
        example: false
        type: boolean
      is_system:
        description: System roles cannot be deleted
        example: true
        type: boolean
      name:
        example: admin
        type: string
      priority:
        description: For role hierarchy
        example: 1
        type: integer
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  models.Rutina:
    properties:
      fecha_creacion:
        type: string
      id:
        type: integer
      nombre:
        type: string
      objetivo:
        type: string
      publica:
        type: boolean
      usuario_id:
        type: integer
    type: object
  models.RutinaConGruposMusculares:
    properties:
      grupos_musculares:
        items:
          $ref: '#/definitions/models.GrupoMuscular'
        type: array
      id:
        type: integer
      rutina_id:
        type: integer
    type: object
  models.RutinaGrupoMuscular:
    properties:
      grupo_muscular_id:
        type: integer
      id:
        type: integer
      rutina_id:
        type: integer
    type: object
  models.Sesion:
    properties:
      comentarios:
        type: string
      duracion_min:
        type: integer
      fecha:
        type: string
      id:
        type: integer
      usuario_id:
        type: integer
    type: object
  models.SesionEjercicio:
    properties:
      ejercicio_id:
        type: integer
      fecha:
        type: string
      id:
        type: integer
      observacion:
        type: string
      orden:
        type: integer
      peso:
        type: number
      repeticiones:
        type: integer
      series:
        type: integer
      sesion_id:
        type: integer
    type: object
  models.TipoEjercicio:
    properties:
      id:
        type: integer
      nombre:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API para gesti√≥n de rutinas de gimnasio
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: GymBro API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user, generates an access token and a refresh token
        in a secure cookie.
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/http.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.LoginResponse'
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Login
      tags:
      - authentication
  /auth/logout:
    post:
      description: Invalidates the user's refresh token.
      produces:
      - application/json
      responses:
        "200":
          description: Session closed successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: No active session to close
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Logout
      tags:
      - authentication
  /auth/refresh:
    post:
      description: Renews the access token using a valid refresh token from a cookie.
      produces:
      - application/json
      responses:
        "200":
          description: New access token
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Cookie not found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Invalid refresh token
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Refresh token
      tags:
      - authentication
  /exercise-types:
    get:
      consumes:
      - application/json
      description: Get a complete list of exercise types
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TipoEjercicio'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all exercise types
      tags:
      - exercise-types
    post:
      consumes:
      - application/json
      description: Create a new exercise type in the system
      parameters:
      - description: Exercise type data
        in: body
        name: exercise-type
        required: true
        schema:
          $ref: '#/definitions/models.TipoEjercicio'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.TipoEjercicio'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new exercise type
      tags:
      - exercise-types
  /exercise-types/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an exercise type from the system
      parameters:
      - description: Exercise Type ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete exercise type
      tags:
      - exercise-types
    get:
      consumes:
      - application/json
      description: Get a specific exercise type by its ID
      parameters:
      - description: Exercise Type ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TipoEjercicio'
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Exercise type not found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get exercise type by ID
      tags:
      - exercise-types
    put:
      consumes:
      - application/json
      description: Update an existing exercise type
      parameters:
      - description: Exercise Type ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated exercise type data
        in: body
        name: exercise-type
        required: true
        schema:
          $ref: '#/definitions/models.TipoEjercicio'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TipoEjercicio'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update exercise type
      tags:
      - exercise-types
  /exercises:
    get:
      consumes:
      - application/json
      description: Get a complete list of exercises
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Ejercicio'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all exercises
      tags:
      - exercises
    post:
      consumes:
      - application/json
      description: Create a new exercise in the system
      parameters:
      - description: Exercise data
        in: body
        name: exercise
        required: true
        schema:
          $ref: '#/definitions/models.Ejercicio'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Ejercicio'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new exercise
      tags:
      - exercises
  /exercises/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an exercise from the system
      parameters:
      - description: Exercise ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete exercise
      tags:
      - exercises
    get:
      consumes:
      - application/json
      description: Get a specific exercise by its ID
      parameters:
      - description: Exercise ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Ejercicio'
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Exercise not found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get exercise by ID
      tags:
      - exercises
    put:
      consumes:
      - application/json
      description: Update an existing exercise
      parameters:
      - description: Exercise ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated exercise data
        in: body
        name: exercise
        required: true
        schema:
          $ref: '#/definitions/models.Ejercicio'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Ejercicio'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update exercise
      tags:
      - exercises
  /exercises/muscle-group/{id}:
    get:
      consumes:
      - application/json
      description: Get all exercises of a specific muscle group
      parameters:
      - description: Muscle Group ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Ejercicio'
            type: array
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get exercises by muscle group
      tags:
      - exercises
  /favorites:
    get:
      consumes:
      - application/json
      description: Get a complete list of favorites
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Favorita'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all favorites
      tags:
      - favorites
    post:
      consumes:
      - application/json
      description: Create a new favorite in the system
      parameters:
      - description: Favorite data
        in: body
        name: favorite
        required: true
        schema:
          $ref: '#/definitions/models.Favorita'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Favorita'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new favorite
      tags:
      - favorites
  /favorites/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a favorite from the system
      parameters:
      - description: Favorite ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete favorite
      tags:
      - favorites
    get:
      consumes:
      - application/json
      description: Get a specific favorite by its ID
      parameters:
      - description: Favorite ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Favorita'
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Favorite not found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get favorite by ID
      tags:
      - favorites
    put:
      consumes:
      - application/json
      description: Update an existing favorite
      parameters:
      - description: Favorite ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated favorite data
        in: body
        name: favorite
        required: true
        schema:
          $ref: '#/definitions/models.Favorita'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Favorita'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update favorite
      tags:
      - favorites
  /favorites/user/{user_id}:
    get:
      consumes:
      - application/json
      description: Get all favorites of a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Favorita'
            type: array
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get favorites by user
      tags:
      - favorites
  /measurements:
    get:
      consumes:
      - application/json
      description: Get a complete list of measurements
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Medicion'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all measurements
      tags:
      - measurements
    post:
      consumes:
      - application/json
      description: Create a new measurement in the system
      parameters:
      - description: Measurement data
        in: body
        name: measurement
        required: true
        schema:
          $ref: '#/definitions/models.Medicion'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Medicion'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new measurement
      tags:
      - measurements
  /measurements/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a measurement from the system
      parameters:
      - description: Measurement ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete measurement
      tags:
      - measurements
    get:
      consumes:
      - application/json
      description: Get a specific measurement by its ID
      parameters:
      - description: Measurement ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Medicion'
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Measurement not found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get measurement by ID
      tags:
      - measurements
    put:
      consumes:
      - application/json
      description: Update an existing measurement
      parameters:
      - description: Measurement ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated measurement data
        in: body
        name: measurement
        required: true
        schema:
          $ref: '#/definitions/models.Medicion'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Medicion'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update measurement
      tags:
      - measurements
  /measurements/user/{user_id}:
    get:
      consumes:
      - application/json
      description: Get all measurements of a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Medicion'
            type: array
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get measurements by user
      tags:
      - measurements
  /muscle-groups:
    get:
      consumes:
      - application/json
      description: Get a complete list of muscle groups
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GrupoMuscular'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all muscle groups
      tags:
      - muscle-groups
    post:
      consumes:
      - application/json
      description: Create a new muscle group in the system
      parameters:
      - description: Muscle group data
        in: body
        name: muscle-group
        required: true
        schema:
          $ref: '#/definitions/models.GrupoMuscular'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.GrupoMuscular'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new muscle group
      tags:
      - muscle-groups
  /muscle-groups/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a muscle group from the system
      parameters:
      - description: Muscle Group ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete muscle group
      tags:
      - muscle-groups
    get:
      consumes:
      - application/json
      description: Get a specific muscle group by its ID
      parameters:
      - description: Muscle Group ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GrupoMuscular'
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Muscle group not found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get muscle group by ID
      tags:
      - muscle-groups
    put:
      consumes:
      - application/json
      description: Update an existing muscle group
      parameters:
      - description: Muscle Group ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated muscle group data
        in: body
        name: muscle-group
        required: true
        schema:
          $ref: '#/definitions/models.GrupoMuscular'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GrupoMuscular'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update muscle group
      tags:
      - muscle-groups
  /roles:
    get:
      description: Get all active roles in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Role'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all active roles
      tags:
      - roles
    post:
      consumes:
      - application/json
      description: Create a new role in the system
      parameters:
      - description: Role object
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/models.Role'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Role'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new role
      tags:
      - roles
  /roles/{id}:
    delete:
      description: Mark a role as deleted (soft delete)
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Soft delete a role
      tags:
      - roles
    get:
      description: Get a role by its ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Role'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a role by ID
      tags:
      - roles
    put:
      consumes:
      - application/json
      description: Update an existing role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Role object
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/models.Role'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Role'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a role
      tags:
      - roles
  /roles/{id}/hard:
    delete:
      description: Permanently delete a role from the system
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Hard delete a role
      tags:
      - roles
  /roles/{id}/restore:
    post:
      description: Restore a soft-deleted role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Restore a deleted role
      tags:
      - roles
  /roles/active:
    get:
      description: Get all active roles in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Role'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all active roles
      tags:
      - roles
  /roles/all:
    get:
      description: Get all roles in the system including deleted ones
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Role'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all roles including deleted ones
      tags:
      - roles
  /roles/name/{name}:
    get:
      description: Get a role by its name
      parameters:
      - description: Role name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Role'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a role by name
      tags:
      - roles
  /roles/system:
    get:
      description: Get all system roles in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Role'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all system roles
      tags:
      - roles
  /routine-muscle-groups:
    get:
      consumes:
      - application/json
      description: Get a complete list of routine muscle groups
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.RutinaGrupoMuscular'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all routine muscle groups
      tags:
      - routine-muscle-groups
    post:
      consumes:
      - application/json
      description: Create a new routine muscle group in the system
      parameters:
      - description: Routine muscle group data
        in: body
        name: routine_muscle_group
        required: true
        schema:
          $ref: '#/definitions/models.RutinaGrupoMuscular'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.RutinaGrupoMuscular'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new routine muscle group
      tags:
      - routine-muscle-groups
  /routine-muscle-groups/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a routine muscle group from the system
      parameters:
      - description: Routine muscle group ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete routine muscle group
      tags:
      - routine-muscle-groups
    get:
      consumes:
      - application/json
      description: Get a specific routine muscle group by its ID
      parameters:
      - description: Routine muscle group ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RutinaGrupoMuscular'
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Routine muscle group not found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get routine muscle group by ID
      tags:
      - routine-muscle-groups
    put:
      consumes:
      - application/json
      description: Update an existing routine muscle group
      parameters:
      - description: Routine muscle group ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated routine muscle group data
        in: body
        name: routine_muscle_group
        required: true
        schema:
          $ref: '#/definitions/models.RutinaGrupoMuscular'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RutinaGrupoMuscular'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update routine muscle group
      tags:
      - routine-muscle-groups
  /routine-muscle-groups/routine/{id}/muscle-groups:
    get:
      consumes:
      - application/json
      description: Get all muscle groups associated with a specific routine
      parameters:
      - description: Routine ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RutinaConGruposMusculares'
        "400":
          description: Invalid routine ID format
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get muscle groups by routine
      tags:
      - routine-muscle-groups
  /routines:
    get:
      consumes:
      - application/json
      description: Get a complete list of routines
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Rutina'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all routines
      tags:
      - routines
    post:
      consumes:
      - application/json
      description: Create a new routine in the system
      parameters:
      - description: Routine data
        in: body
        name: routine
        required: true
        schema:
          $ref: '#/definitions/models.Rutina'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Rutina'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new routine
      tags:
      - routines
  /routines/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a routine from the system
      parameters:
      - description: Routine ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete routine
      tags:
      - routines
    get:
      consumes:
      - application/json
      description: Get a specific routine by its ID
      parameters:
      - description: Routine ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Rutina'
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Routine not found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get routine by ID
      tags:
      - routines
    put:
      consumes:
      - application/json
      description: Update an existing routine
      parameters:
      - description: Routine ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated routine data
        in: body
        name: routine
        required: true
        schema:
          $ref: '#/definitions/models.Rutina'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Rutina'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update routine
      tags:
      - routines
  /session-exercises:
    get:
      consumes:
      - application/json
      description: Get a complete list of session exercises
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SesionEjercicio'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all session exercises
      tags:
      - session-exercises
    post:
      consumes:
      - application/json
      description: Create a new session exercise in the system
      parameters:
      - description: Session exercise data
        in: body
        name: session_exercise
        required: true
        schema:
          $ref: '#/definitions/models.SesionEjercicio'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SesionEjercicio'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new session exercise
      tags:
      - session-exercises
  /session-exercises/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a session exercise from the system
      parameters:
      - description: Session exercise ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete session exercise
      tags:
      - session-exercises
    get:
      consumes:
      - application/json
      description: Get a specific session exercise by its ID
      parameters:
      - description: Session exercise ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SesionEjercicio'
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Session exercise not found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get session exercise by ID
      tags:
      - session-exercises
    put:
      consumes:
      - application/json
      description: Update an existing session exercise
      parameters:
      - description: Session exercise ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated session exercise data
        in: body
        name: session_exercise
        required: true
        schema:
          $ref: '#/definitions/models.SesionEjercicio'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SesionEjercicio'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update session exercise
      tags:
      - session-exercises
  /session-exercises/session/{id}:
    get:
      consumes:
      - application/json
      description: Get all exercises of a specific session
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: integer
      - description: 'Start date (format: 2006-01-02)'
        in: query
        name: start_date
        type: string
      - description: 'End date (format: 2006-01-02)'
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SesionEjercicio'
            type: array
        "400":
          description: Invalid ID format or date format
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get session exercises by session ID
      tags:
      - session-exercises
  /sessions:
    get:
      consumes:
      - application/json
      description: Get a complete list of training sessions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Sesion'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all sessions
      tags:
      - sessions
    post:
      consumes:
      - application/json
      description: Create a new training session in the system
      parameters:
      - description: Session data
        in: body
        name: session
        required: true
        schema:
          $ref: '#/definitions/models.Sesion'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Sesion'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new session
      tags:
      - sessions
  /sessions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a session from the system
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete session
      tags:
      - sessions
    get:
      consumes:
      - application/json
      description: Get a specific session by its ID
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Sesion'
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Session not found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get session by ID
      tags:
      - sessions
    put:
      consumes:
      - application/json
      description: Update an existing session
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated session data
        in: body
        name: session
        required: true
        schema:
          $ref: '#/definitions/models.Sesion'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Sesion'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update session
      tags:
      - sessions
  /sessions/date-range:
    get:
      consumes:
      - application/json
      description: Get all sessions within a specific date range
      parameters:
      - description: 'Start date (ISO format: 2024-01-02T15:04:05Z)'
        in: query
        name: start_date
        required: true
        type: string
      - description: 'End date (ISO format: 2024-01-02T15:04:05Z)'
        in: query
        name: end_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Sesion'
            type: array
        "400":
          description: Invalid date format
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get sessions by date range
      tags:
      - sessions
  /sessions/user/{id}:
    get:
      consumes:
      - application/json
      description: Get all sessions of a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Sesion'
            type: array
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get sessions by user
      tags:
      - sessions
  /users:
    get:
      consumes:
      - application/json
      description: Get a complete list of active users (excluding deleted ones)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UserResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all active users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Register a new user in the system
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Soft delete a user from the system (logical deletion)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid ID format or user already deleted
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Soft delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get a specific user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing user's data
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - users
  /users/{id}/permanent:
    delete:
      consumes:
      - application/json
      description: Permanently delete a user from the system (physical deletion)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Hard delete user
      tags:
      - users
  /users/{id}/restore:
    post:
      consumes:
      - application/json
      description: Restore a soft deleted user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User restored successfully
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Invalid ID format or user not deleted
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Restore deleted user
      tags:
      - users
  /users/all:
    get:
      consumes:
      - application/json
      description: Get a complete list of all users including deleted ones
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UserResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all users including deleted
      tags:
      - users
  /users/deleted:
    get:
      consumes:
      - application/json
      description: Get a list of all deleted users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UserResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get deleted users
      tags:
      - users
  /users/email/{email}:
    get:
      consumes:
      - application/json
      description: Get a specific user by their email
      parameters:
      - description: User Email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by email
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
